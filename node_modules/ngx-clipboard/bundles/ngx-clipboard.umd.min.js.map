{"version":3,"sources":["ng://ngx-clipboard/lib/ngx-clipboard.service.ts","ng://ngx-clipboard/lib/ngx-clipboard.directive.ts","ng://ngx-clipboard/lib/ngx-clipboard.module.ts"],"names":["ClipboardService","document","window","this","prototype","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","selectTarget","re","copyText","clearSelection","error","copyFromContent","content","tempTextArea","createTempTextArea","body","appendChild","value","destroy","removeChild","undefined","inputElement","select","setSelectionRange","length","execCommand","blur","getSelection","removeAllRanges","doc","ta","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","Injectable","Inject","args","DOCUMENT","WINDOW","CLIPBOARD_SERVICE_PROVIDER_FACTORY","win","parentDispatcher","CLIPBOARD_SERVICE_PROVIDER","deps","Optional","SkipSelf","provide","useFactory","ClipboardDirective","clipboardSrv","EventEmitter","ngOnInit","ngOnDestroy","onClick","event","isSupported","handleResult","cbContent","succeeded","copiedContent","cbOnSuccess","emit","isSuccess","cbOnError","Directive","selector","Input","Output","HostListener","ClipboardModule","NgModule","imports","CommonModule","NgxWindowTokenModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import {\n  Inject,\n  Injectable,\n  Optional,\n  SkipSelf,\n  InjectionToken\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { WINDOW } from 'ngx-window-token';\n\n@Injectable()\nexport class ClipboardService {\n  private tempTextArea: HTMLTextAreaElement | undefined;\n  constructor(\n    @Inject(DOCUMENT) private document: any,\n    @Inject(WINDOW) private window: any\n  ) {}\n  public get isSupported(): boolean {\n    return (\n      !!this.document.queryCommandSupported &&\n      !!this.document.queryCommandSupported('copy')\n    );\n  }\n\n  public isTargetValid(\n    element: HTMLInputElement | HTMLTextAreaElement\n  ): boolean {\n    if (\n      element instanceof HTMLInputElement ||\n      element instanceof HTMLTextAreaElement\n    ) {\n      if (element.hasAttribute('disabled')) {\n        // tslint:disable-next-line:max-line-length\n        throw new Error(\n          'Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute'\n        );\n      }\n      return true;\n    }\n    throw new Error('Target should be input or textarea');\n  }\n\n  /**\n   * copyFromInputElement\n   */\n  public copyFromInputElement(\n    targetElm: HTMLInputElement | HTMLTextAreaElement\n  ): boolean {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(targetElm, this.window);\n      return re;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Creates a fake textarea element, sets its value from `text` property,\n   * and makes a selection on it.\n   */\n  public copyFromContent(content: string) {\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n      this.document.body.appendChild(this.tempTextArea);\n    }\n    this.tempTextArea.value = content;\n    return this.copyFromInputElement(this.tempTextArea);\n  }\n\n  // remove temporary textarea if any\n  public destroy() {\n    if (this.tempTextArea) {\n      this.document.body.removeChild(this.tempTextArea);\n      this.tempTextArea = undefined;\n    }\n  }\n\n  // select the target html input element\n  private selectTarget(\n    inputElement: HTMLInputElement | HTMLTextAreaElement\n  ): number | undefined {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n\n  private copyText(): boolean {\n    return this.document.execCommand('copy');\n  }\n  // Removes current selection and focus from `target` element.\n  private clearSelection(\n    inputElement: HTMLInputElement | HTMLTextAreaElement,\n    window: Window\n  ) {\n    // tslint:disable-next-line:no-unused-expression\n    inputElement && inputElement.blur();\n    window.getSelection().removeAllRanges();\n  }\n\n  // create a fake textarea for copy command\n  private createTempTextArea(\n    doc: Document,\n    window: Window\n  ): HTMLTextAreaElement {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta: HTMLTextAreaElement;\n    ta = doc.createElement('textarea');\n    // Prevent zooming on iOS\n    ta.style.fontSize = '12pt';\n    // Reset box model\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0';\n    // Move element out of screen horizontally\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n}\n// this pattern is mentioned in https://github.com/angular/angular/issues/13854 in #43\nexport function CLIPBOARD_SERVICE_PROVIDER_FACTORY(\n  doc: Document,\n  win: Window,\n  parentDispatcher: ClipboardService\n) {\n  return parentDispatcher || new ClipboardService(doc, win);\n}\n\nexport const CLIPBOARD_SERVICE_PROVIDER = {\n  deps: [\n    DOCUMENT as InjectionToken<Document>,\n    WINDOW as InjectionToken<Document>,\n    [new Optional(), new SkipSelf(), ClipboardService]\n  ],\n  provide: ClipboardService,\n  useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY\n};\n","import {\n  Directive,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output\n} from '@angular/core';\n\nimport { ClipboardService } from './ngx-clipboard.service';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxClipboard]'\n})\nexport class ClipboardDirective implements OnInit, OnDestroy {\n  // tslint:disable-next-line:no-input-rename\n  @Input('ngxClipboard') public targetElm: HTMLInputElement;\n\n  @Input() public cbContent: string;\n\n  @Output() public cbOnSuccess: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() public cbOnError: EventEmitter<any> = new EventEmitter<any>();\n  constructor(private clipboardSrv: ClipboardService) {}\n\n  // tslint:disable-next-line:no-empty\n  public ngOnInit() {}\n\n  public ngOnDestroy() {\n    this.clipboardSrv.destroy();\n  }\n\n  @HostListener('click', ['$event.target'])\n  public onClick(event: Event) {\n    if (!this.clipboardSrv.isSupported) {\n      this.handleResult(false, undefined);\n    } else if (\n      this.targetElm &&\n      this.clipboardSrv.isTargetValid(this.targetElm)\n    ) {\n      this.handleResult(\n        this.clipboardSrv.copyFromInputElement(this.targetElm),\n        this.targetElm.value\n      );\n    } else if (this.cbContent) {\n      this.handleResult(\n        this.clipboardSrv.copyFromContent(this.cbContent),\n        this.cbContent\n      );\n    }\n  }\n\n  /**\n   * Fires an event based on the copy operation result.\n   * @param succeeded\n   */\n  private handleResult(succeeded: boolean, copiedContent: string | undefined) {\n    if (succeeded) {\n      this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent });\n    } else {\n      this.cbOnError.emit({ isSuccess: false });\n    }\n  }\n}\n","import { ClipboardDirective } from './ngx-clipboard.directive';\nimport { CLIPBOARD_SERVICE_PROVIDER } from './ngx-clipboard.service';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxWindowTokenModule } from 'ngx-window-token';\nexport * from './ngx-clipboard.directive';\nexport * from './ngx-clipboard.service';\n\n@NgModule({\n  imports: [CommonModule, NgxWindowTokenModule],\n  // tslint:disable-next-line:object-literal-sort-keys\n  declarations: [ClipboardDirective],\n  exports: [ClipboardDirective],\n  providers: [CLIPBOARD_SERVICE_PROVIDER]\n})\nexport class ClipboardModule {}\n"]}