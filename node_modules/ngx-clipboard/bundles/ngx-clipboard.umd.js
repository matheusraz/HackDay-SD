(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('ngx-window-token'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-clipboard', ['exports', '@angular/core', '@angular/platform-browser', 'ngx-window-token', '@angular/common'], factory) :
    (factory((global['ngx-clipboard'] = {}),global.ng.core,global.ng.platformBrowser,null,global.ng.common));
}(this, (function (exports,core,platformBrowser,ngxWindowToken,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ClipboardService = (function () {
        function ClipboardService(document, window) {
            this.document = document;
            this.window = window;
        }
        Object.defineProperty(ClipboardService.prototype, "isSupported", {
            get: /**
             * @return {?}
             */ function () {
                return (!!this.document.queryCommandSupported &&
                    !!this.document.queryCommandSupported('copy'));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} element
         * @return {?}
         */
        ClipboardService.prototype.isTargetValid = /**
         * @param {?} element
         * @return {?}
         */
            function (element) {
                if (element instanceof HTMLInputElement ||
                    element instanceof HTMLTextAreaElement) {
                    if (element.hasAttribute('disabled')) {
                        // tslint:disable-next-line:max-line-length
                        throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }
                    return true;
                }
                throw new Error('Target should be input or textarea');
            };
        /**
         * copyFromInputElement
         * @param {?} targetElm
         * @return {?}
         */
        ClipboardService.prototype.copyFromInputElement = /**
         * copyFromInputElement
         * @param {?} targetElm
         * @return {?}
         */
            function (targetElm) {
                try {
                    this.selectTarget(targetElm);
                    var /** @type {?} */ re = this.copyText();
                    this.clearSelection(targetElm, this.window);
                    return re;
                }
                catch (error) {
                    return false;
                }
            };
        /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         * @param {?} content
         * @return {?}
         */
        ClipboardService.prototype.copyFromContent = /**
         * Creates a fake textarea element, sets its value from `text` property,
         * and makes a selection on it.
         * @param {?} content
         * @return {?}
         */
            function (content) {
                if (!this.tempTextArea) {
                    this.tempTextArea = this.createTempTextArea(this.document, this.window);
                    this.document.body.appendChild(this.tempTextArea);
                }
                this.tempTextArea.value = content;
                return this.copyFromInputElement(this.tempTextArea);
            };
        /**
         * @return {?}
         */
        ClipboardService.prototype.destroy = /**
         * @return {?}
         */
            function () {
                if (this.tempTextArea) {
                    this.document.body.removeChild(this.tempTextArea);
                    this.tempTextArea = undefined;
                }
            };
        /**
         * @param {?} inputElement
         * @return {?}
         */
        ClipboardService.prototype.selectTarget = /**
         * @param {?} inputElement
         * @return {?}
         */
            function (inputElement) {
                inputElement.select();
                inputElement.setSelectionRange(0, inputElement.value.length);
                return inputElement.value.length;
            };
        /**
         * @return {?}
         */
        ClipboardService.prototype.copyText = /**
         * @return {?}
         */
            function () {
                return this.document.execCommand('copy');
            };
        /**
         * @param {?} inputElement
         * @param {?} window
         * @return {?}
         */
        ClipboardService.prototype.clearSelection = /**
         * @param {?} inputElement
         * @param {?} window
         * @return {?}
         */
            function (inputElement, window) {
                // tslint:disable-next-line:no-unused-expression
                inputElement && inputElement.blur();
                window.getSelection().removeAllRanges();
            };
        /**
         * @param {?} doc
         * @param {?} window
         * @return {?}
         */
        ClipboardService.prototype.createTempTextArea = /**
         * @param {?} doc
         * @param {?} window
         * @return {?}
         */
            function (doc, window) {
                var /** @type {?} */ isRTL = doc.documentElement.getAttribute('dir') === 'rtl';
                var /** @type {?} */ ta;
                ta = doc.createElement('textarea');
                // Prevent zooming on iOS
                ta.style.fontSize = '12pt';
                // Reset box model
                ta.style.border = '0';
                ta.style.padding = '0';
                ta.style.margin = '0';
                // Move element out of screen horizontally
                ta.style.position = 'absolute';
                ta.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var /** @type {?} */ yPosition = window.pageYOffset || doc.documentElement.scrollTop;
                ta.style.top = yPosition + 'px';
                ta.setAttribute('readonly', '');
                return ta;
            };
        ClipboardService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        ClipboardService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
                { type: undefined, decorators: [{ type: core.Inject, args: [ngxWindowToken.WINDOW,] },] },
            ];
        };
        return ClipboardService;
    }());
    /**
     * @param {?} doc
     * @param {?} win
     * @param {?} parentDispatcher
     * @return {?}
     */
    function CLIPBOARD_SERVICE_PROVIDER_FACTORY(doc, win, parentDispatcher) {
        return parentDispatcher || new ClipboardService(doc, win);
    }
    var /** @type {?} */ CLIPBOARD_SERVICE_PROVIDER = {
        deps: [/** @type {?} */ (platformBrowser.DOCUMENT), /** @type {?} */ (ngxWindowToken.WINDOW), [new core.Optional(), new core.SkipSelf(), ClipboardService]
        ],
        provide: ClipboardService,
        useFactory: CLIPBOARD_SERVICE_PROVIDER_FACTORY
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ClipboardDirective = (function () {
        function ClipboardDirective(clipboardSrv) {
            this.clipboardSrv = clipboardSrv;
            this.cbOnSuccess = new core.EventEmitter();
            this.cbOnError = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ClipboardDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        ClipboardDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.clipboardSrv.destroy();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        ClipboardDirective.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.clipboardSrv.isSupported) {
                    this.handleResult(false, undefined);
                }
                else if (this.targetElm &&
                    this.clipboardSrv.isTargetValid(this.targetElm)) {
                    this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value);
                }
                else if (this.cbContent) {
                    this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent), this.cbContent);
                }
            };
        /**
         * Fires an event based on the copy operation result.
         * @param {?} succeeded
         * @param {?} copiedContent
         * @return {?}
         */
        ClipboardDirective.prototype.handleResult = /**
         * Fires an event based on the copy operation result.
         * @param {?} succeeded
         * @param {?} copiedContent
         * @return {?}
         */
            function (succeeded, copiedContent) {
                if (succeeded) {
                    this.cbOnSuccess.emit({ isSuccess: true, content: copiedContent });
                }
                else {
                    this.cbOnError.emit({ isSuccess: false });
                }
            };
        ClipboardDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[ngxClipboard]'
                    },] },
        ];
        /** @nocollapse */
        ClipboardDirective.ctorParameters = function () {
            return [
                { type: ClipboardService, },
            ];
        };
        ClipboardDirective.propDecorators = {
            "targetElm": [{ type: core.Input, args: ['ngxClipboard',] },],
            "cbContent": [{ type: core.Input },],
            "cbOnSuccess": [{ type: core.Output },],
            "cbOnError": [{ type: core.Output },],
            "onClick": [{ type: core.HostListener, args: ['click', ['$event.target'],] },],
        };
        return ClipboardDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ClipboardModule = (function () {
        function ClipboardModule() {
        }
        ClipboardModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, ngxWindowToken.NgxWindowTokenModule],
                        // tslint:disable-next-line:object-literal-sort-keys
                        declarations: [ClipboardDirective],
                        exports: [ClipboardDirective],
                        providers: [CLIPBOARD_SERVICE_PROVIDER]
                    },] },
        ];
        return ClipboardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ClipboardService = ClipboardService;
    exports.CLIPBOARD_SERVICE_PROVIDER_FACTORY = CLIPBOARD_SERVICE_PROVIDER_FACTORY;
    exports.CLIPBOARD_SERVICE_PROVIDER = CLIPBOARD_SERVICE_PROVIDER;
    exports.ClipboardDirective = ClipboardDirective;
    exports.ClipboardModule = ClipboardModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,